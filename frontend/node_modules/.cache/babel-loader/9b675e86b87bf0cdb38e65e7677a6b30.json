{"ast":null,"code":"import axios from 'axios';\nimport { BLOOD_ISSUE_REQUEST, BLOOD_ISSUE_SUCCESS, BLOOD_ISSUE_FAIL, BLOOD_ISSUE_CREATE_FAIL, BLOOD_ISSUE_CREATE_REQUEST, BLOOD_ISSUE_CREATE_SUCCESS, BLOOD_ISSUE_DELETE_REQUEST, BLOOD_ISSUE_DELETE_SUCCESS, BLOOD_ISSUE_DELETE_FAIL } from '../constants/bloodIssueConstants';\nexport const listBloodIssue = () => async dispatch => {\n  try {\n    dispatch({\n      type: BLOOD_ISSUE_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/blood-issue`);\n    dispatch({\n      type: BLOOD_ISSUE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: BLOOD_ISSUE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const createBloodIssue = blood => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: BLOOD_ISSUE_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/blood-issue`, blood, config);\n    dispatch({\n      type: BLOOD_ISSUE_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: BLOOD_ISSUE_CREATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const deleteBloodIssue = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: BLOOD_ISSUE_DELETE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    await axios.delete(`/api/blood-issue/${id}`, config);\n    dispatch({\n      type: BLOOD_ISSUE_DELETE_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: BLOOD_ISSUE_DELETE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/home/zimo/Documents/Documents/MERN-Stack-Blood-Bank-master/frontend/src/actions/bloodIssueActions.js"],"names":["axios","BLOOD_ISSUE_REQUEST","BLOOD_ISSUE_SUCCESS","BLOOD_ISSUE_FAIL","BLOOD_ISSUE_CREATE_FAIL","BLOOD_ISSUE_CREATE_REQUEST","BLOOD_ISSUE_CREATE_SUCCESS","BLOOD_ISSUE_DELETE_REQUEST","BLOOD_ISSUE_DELETE_SUCCESS","BLOOD_ISSUE_DELETE_FAIL","listBloodIssue","dispatch","type","data","get","payload","error","response","message","createBloodIssue","blood","getState","userLogin","userInfo","config","headers","Authorization","token","post","deleteBloodIssue","id","delete"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport {\n  BLOOD_ISSUE_REQUEST,\n  BLOOD_ISSUE_SUCCESS,\n  BLOOD_ISSUE_FAIL,\n  BLOOD_ISSUE_CREATE_FAIL,\n  BLOOD_ISSUE_CREATE_REQUEST,\n  BLOOD_ISSUE_CREATE_SUCCESS,\n  BLOOD_ISSUE_DELETE_REQUEST,\n  BLOOD_ISSUE_DELETE_SUCCESS,\n  BLOOD_ISSUE_DELETE_FAIL,\n} from '../constants/bloodIssueConstants'\n\nexport const listBloodIssue = () => async (dispatch) => {\n  try {\n    dispatch({ type: BLOOD_ISSUE_REQUEST })\n\n    const { data } = await axios.get(`/api/blood-issue`)\n\n    dispatch({\n      type: BLOOD_ISSUE_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: BLOOD_ISSUE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n\nexport const createBloodIssue = (blood) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: BLOOD_ISSUE_CREATE_REQUEST })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.post(`/api/blood-issue`, blood, config)\n\n    dispatch({\n      type: BLOOD_ISSUE_CREATE_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: BLOOD_ISSUE_CREATE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n\nexport const deleteBloodIssue = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: BLOOD_ISSUE_DELETE_REQUEST })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    await axios.delete(`/api/blood-issue/${id}`, config)\n\n    dispatch({\n      type: BLOOD_ISSUE_DELETE_SUCCESS,\n    })\n  } catch (error) {\n    dispatch({\n      type: BLOOD_ISSUE_DELETE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}