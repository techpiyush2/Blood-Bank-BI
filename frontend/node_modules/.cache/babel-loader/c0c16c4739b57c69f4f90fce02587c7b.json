{"ast":null,"code":"import axios from 'axios';\nimport { BLOOD_REQUEST_REQUEST, BLOOD_REQUEST_SUCCESS, BLOOD_REQUEST_FAIL, BLOOD_REQUEST_CREATE_FAIL, BLOOD_REQUEST_CREATE_REQUEST, BLOOD_REQUEST_CREATE_SUCCESS, BLOOD_REQUEST_UPDATE_FAIL, BLOOD_REQUEST_UPDATE_SUCCESS, BLOOD_REQUEST_UPDATE_REQUEST, BLOOD_REQUEST_DELETE_REQUEST, BLOOD_REQUEST_DELETE_SUCCESS, BLOOD_REQUEST_DELETE_FAIL } from '../constants/bloodRequestConstants';\nexport const listBloodRequest = () => async dispatch => {\n  try {\n    dispatch({\n      type: BLOOD_REQUEST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/blood-request`);\n    dispatch({\n      type: BLOOD_REQUEST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: BLOOD_REQUEST_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const createBloodRequest = blood => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: BLOOD_REQUEST_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/blood-request`, blood, config);\n    dispatch({\n      type: BLOOD_REQUEST_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: BLOOD_REQUEST_CREATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const updateBloodRequest = blood => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: BLOOD_REQUEST_UPDATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    await axios.put(`/api/blood-request/${blood._id}`, blood, config);\n    dispatch({\n      type: BLOOD_REQUEST_UPDATE_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: BLOOD_REQUEST_UPDATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const deleteBloodRequest = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: BLOOD_REQUEST_DELETE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    await axios.delete(`/api/blood-request/${id}`, config);\n    dispatch({\n      type: BLOOD_REQUEST_DELETE_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: BLOOD_REQUEST_DELETE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["/home/zimo/Documents/Documents/MERN-Stack-Blood-Bank-master/frontend/src/actions/bloodRequestActions.js"],"names":["axios","BLOOD_REQUEST_REQUEST","BLOOD_REQUEST_SUCCESS","BLOOD_REQUEST_FAIL","BLOOD_REQUEST_CREATE_FAIL","BLOOD_REQUEST_CREATE_REQUEST","BLOOD_REQUEST_CREATE_SUCCESS","BLOOD_REQUEST_UPDATE_FAIL","BLOOD_REQUEST_UPDATE_SUCCESS","BLOOD_REQUEST_UPDATE_REQUEST","BLOOD_REQUEST_DELETE_REQUEST","BLOOD_REQUEST_DELETE_SUCCESS","BLOOD_REQUEST_DELETE_FAIL","listBloodRequest","dispatch","type","data","get","payload","error","response","message","createBloodRequest","blood","getState","userLogin","userInfo","config","headers","Authorization","token","post","updateBloodRequest","put","_id","deleteBloodRequest","id","delete"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport {\n  BLOOD_REQUEST_REQUEST,\n  BLOOD_REQUEST_SUCCESS,\n  BLOOD_REQUEST_FAIL,\n  BLOOD_REQUEST_CREATE_FAIL,\n  BLOOD_REQUEST_CREATE_REQUEST,\n  BLOOD_REQUEST_CREATE_SUCCESS,\n  BLOOD_REQUEST_UPDATE_FAIL,\n  BLOOD_REQUEST_UPDATE_SUCCESS,\n  BLOOD_REQUEST_UPDATE_REQUEST,\n  BLOOD_REQUEST_DELETE_REQUEST,\n  BLOOD_REQUEST_DELETE_SUCCESS,\n  BLOOD_REQUEST_DELETE_FAIL,\n} from '../constants/bloodRequestConstants'\n\nexport const listBloodRequest = () => async (dispatch) => {\n  try {\n    dispatch({ type: BLOOD_REQUEST_REQUEST })\n\n    const { data } = await axios.get(`/api/blood-request`)\n\n    dispatch({\n      type: BLOOD_REQUEST_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: BLOOD_REQUEST_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n\nexport const createBloodRequest = (blood) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: BLOOD_REQUEST_CREATE_REQUEST })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.post(`/api/blood-request`, blood, config)\n\n    dispatch({\n      type: BLOOD_REQUEST_CREATE_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: BLOOD_REQUEST_CREATE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n\nexport const updateBloodRequest = (blood) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: BLOOD_REQUEST_UPDATE_REQUEST })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    await axios.put(`/api/blood-request/${blood._id}`, blood, config)\n\n    dispatch({\n      type: BLOOD_REQUEST_UPDATE_SUCCESS,\n    })\n  } catch (error) {\n    dispatch({\n      type: BLOOD_REQUEST_UPDATE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n\nexport const deleteBloodRequest = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: BLOOD_REQUEST_DELETE_REQUEST })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    await axios.delete(`/api/blood-request/${id}`, config)\n\n    dispatch({\n      type: BLOOD_REQUEST_DELETE_SUCCESS,\n    })\n  } catch (error) {\n    dispatch({\n      type: BLOOD_REQUEST_DELETE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}