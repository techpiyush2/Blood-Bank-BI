{"ast":null,"code":"import axios from 'axios';\nimport { COMMENT_REQUEST, COMMENT_SUCCESS, COMMENT_FAIL, COMMENT_CREATE_FAIL, COMMENT_CREATE_REQUEST, COMMENT_CREATE_SUCCESS, COMMENT_UPDATE_FAIL, COMMENT_UPDATE_SUCCESS, COMMENT_UPDATE_REQUEST, COMMENT_DELETE_REQUEST, COMMENT_DELETE_SUCCESS, COMMENT_DELETE_FAIL } from '../constants/commentConstants';\nexport const listComment = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: COMMENT_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/comment`, config);\n    dispatch({\n      type: COMMENT_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: COMMENT_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const createComment = comment => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: COMMENT_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/comment`, {\n      comment\n    }, config);\n    dispatch({\n      type: COMMENT_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: COMMENT_CREATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const updateComment = comment => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: COMMENT_UPDATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    await axios.put(`/api/comment/${comment._id}`, comment, config);\n    dispatch({\n      type: COMMENT_UPDATE_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: COMMENT_UPDATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const deleteComment = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: COMMENT_DELETE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    await axios.delete(`/api/comment/${id}`, config);\n    dispatch({\n      type: COMMENT_DELETE_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: COMMENT_DELETE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/pk409/OneDrive/Desktop/MERN-Stack-Blood-Bank-master/frontend/src/actions/commentActions.js"],"names":["axios","COMMENT_REQUEST","COMMENT_SUCCESS","COMMENT_FAIL","COMMENT_CREATE_FAIL","COMMENT_CREATE_REQUEST","COMMENT_CREATE_SUCCESS","COMMENT_UPDATE_FAIL","COMMENT_UPDATE_SUCCESS","COMMENT_UPDATE_REQUEST","COMMENT_DELETE_REQUEST","COMMENT_DELETE_SUCCESS","COMMENT_DELETE_FAIL","listComment","dispatch","getState","type","userLogin","userInfo","config","headers","Authorization","token","data","get","payload","error","response","message","createComment","comment","post","updateComment","put","_id","deleteComment","id","delete"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport {\n  COMMENT_REQUEST,\n  COMMENT_SUCCESS,\n  COMMENT_FAIL,\n  COMMENT_CREATE_FAIL,\n  COMMENT_CREATE_REQUEST,\n  COMMENT_CREATE_SUCCESS,\n  COMMENT_UPDATE_FAIL,\n  COMMENT_UPDATE_SUCCESS,\n  COMMENT_UPDATE_REQUEST,\n  COMMENT_DELETE_REQUEST,\n  COMMENT_DELETE_SUCCESS,\n  COMMENT_DELETE_FAIL,\n} from '../constants/commentConstants'\n\nexport const listComment = () => async (dispatch, getState) => {\n  try {\n    dispatch({ type: COMMENT_REQUEST })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.get(`/api/comment`, config)\n\n    dispatch({\n      type: COMMENT_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: COMMENT_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n\nexport const createComment = (comment) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: COMMENT_CREATE_REQUEST })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.post(`/api/comment`, { comment }, config)\n\n    dispatch({\n      type: COMMENT_CREATE_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: COMMENT_CREATE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n\nexport const updateComment = (comment) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: COMMENT_UPDATE_REQUEST })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    await axios.put(`/api/comment/${comment._id}`, comment, config)\n\n    dispatch({\n      type: COMMENT_UPDATE_SUCCESS,\n    })\n  } catch (error) {\n    dispatch({\n      type: COMMENT_UPDATE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n\nexport const deleteComment = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: COMMENT_DELETE_REQUEST })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    await axios.delete(`/api/comment/${id}`, config)\n\n    dispatch({\n      type: COMMENT_DELETE_SUCCESS,\n    })\n  } catch (error) {\n    dispatch({\n      type: COMMENT_DELETE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}